Load balancing Sink Processor　
load balance type和failover不同的地方是，load balance有两个配置，一个是轮询，一个是随机。
两种情况下如果被选择的sink不可用，就会自动尝试发送到下一个可用的sink上面

a)在m1创建Load_balancing_Sink_Processors配置文件

a1.sources = r1
a1.sinks = k1 k2
a1.channels = c1
  
#这个是配置Load balancing的关键，需要有一个sink group
a1.sinkgroups = g1
a1.sinkgroups.g1.sinks = k1 k2
a1.sinkgroups.g1.processor.type = load_balance
a1.sinkgroups.g1.processor.backoff = true
a1.sinkgroups.g1.processor.selector = round_robin
  
# Describe/configure the source
a1.sources.r1.type = syslogtcp
a1.sources.r1.port = 5140
a1.sources.r1.channels = c1
  
  
# Describe the sink
a1.sinks.k1.type = avro
a1.sinks.k1.channel = c1
a1.sinks.k1.hostname = 172.17.201.15
a1.sinks.k1.port = 5555
  
a1.sinks.k2.type = avro
a1.sinks.k2.channel = c1
a1.sinks.k2.hostname = 172.17.201.70
a1.sinks.k2.port = 5555
  
# Use a channel which buffers events in memory
a1.channels.c1.type = memory
a1.channels.c1.capacity = 1000
a1.channels.c1.transactionCapacity = 100


b)在m1创建Load_balancing_Sink_Processors_avro配置文件
a1.sources = r1
a1.sinks = k1
a1.channels = c1
  
# Describe/configure the source
a1.sources.r1.type = avro
a1.sources.r1.channels = c1
a1.sources.r1.bind = 0.0.0.0
a1.sources.r1.port = 5555
  
# Describe the sink
a1.sinks.k1.type = logger
  
# Use a channel which buffers events in memory
a1.channels.c1.type = memory
a1.channels.c1.capacity = 1000
a1.channels.c1.transactionCapacity = 100
  
# Bind the source and sink to the channel
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1


c)将2个配置文件复制到m2上一份
[root@m1 flume-ng]# scp conf/loadbalance* root@172.17.201.70:/usr/lib/flume-ng/conf/
loadbalance_avro.conf                                                                                                                                        100%  489     0.5KB/s   00:00    
loadbalance.conf 


d)打开4个窗口，在m1和m2上同时启动两个flume agent
bin/flume-ng agent -c conf -f conf/loadbalance_avro.conf -n a1 -Dflume.root.logger=INFO,console
bin/flume-ng agent -c conf -f conf/loadbalance.conf -n a1 -Dflume.root.logger=INFO,console



e)然后在m1或m2的任意一台机器上，测试产生log，一行一行输入，输入太快，容易落到一台机器上
[root@n1 ~]# echo "idoall.org test1" | nc localhost 5140
[root@n1 ~]# echo "idoall.org test2" | nc localhost 5140
[root@n1 ~]# echo "idoall.org test3" | nc localhost 5140
[root@n1 ~]# echo "idoall.org test4" | nc localhost 5140




f)在m1的sink窗口，可以看到以下信息：
2017-03-06 15:47:09,811 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:94)] Event: { headers:{Severity=0, flume.syslog.status=Invalid, Facility=0} body: 69 64 6F 61 6C 6C 2E 6F 72 67 20 74 65 73 74 31 idoall.org test1 }
2017-03-06 15:47:15,423 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:94)] Event: { headers:{Severity=0, flume.syslog.status=Invalid, Facility=0} body: 69 64 6F 61 6C 6C 2E 6F 72 67 20 74 65 73 74 33 idoall.org test3 }



g)在m2的sink窗口，可以看到以下信息：
2017-03-06 15:47:11,411 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:94)] Event: { headers:{Severity=0, flume.syslog.status=Invalid, Facility=0} body: 69 64 6F 61 6C 6C 2E 6F 72 67 20 74 65 73 74 32 idoall.org test2 }
2017-03-06 15:47:20,412 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:94)] Event: { headers:{Severity=0, flume.syslog.status=Invalid, Facility=0} body: 69 64 6F 61 6C 6C 2E 6F 72 67 20 74 65 73 74 34 idoall.org test4 }




说明轮询模式起到了作用。



